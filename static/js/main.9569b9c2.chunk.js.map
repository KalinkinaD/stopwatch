{"version":3,"sources":["App.js","index.js"],"names":["App","useState","time","setTime","isGoing","setIsGoing","timer$","interval","useEffect","start","pipe","startWith","scan","share","subscribe","i","unsubscribe","handleClick","button","className","Date","toISOString","substr","toHHMMSS","onClick","onDoubleClick","timer","first","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAuEeA,G,MAlEH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTC,EADS,KACHC,EADG,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,KAGZC,EAASC,YAAS,KACtBC,qBAAU,WACR,IAAIC,EAcJ,OAZAA,EAAQH,EACLI,KACCC,YAAUT,GACVU,aAAK,SAAAV,GAAI,OAAIA,EAAO,KACpBW,eAEDC,WAAU,SAAAC,GACLX,GACFD,EAAQY,MAIP,kBAAMN,EAAMO,iBAClB,CAACZ,EAASF,EAAMI,IAEnB,IAAMW,EAAc,SAAAC,GAClB,IAAMT,EAAQL,EACC,UAAXc,EACFb,GAAYI,GACQ,SAAXS,IACTf,EAAQ,GACRE,GAAYI,KAkBhB,OACE,sBAAKU,UAAU,MAAf,UACE,qBAAKA,UAAU,iBAAf,SANW,SAAAjB,GACf,OAAO,IAAIkB,KAAY,IAAPlB,GAAamB,cAAcC,OAAO,GAAI,GAMhDC,CAASrB,KAEX,sBAAKiB,UAAU,aAAf,UACE,wBACEK,QACEpB,EAAU,kBAAMa,EAAY,SAAU,kBAAMA,EAAY,UAF5D,SAKGb,EAAU,OAAS,UAEtB,wBAAQqB,cAxBK,WACDC,YAAM,KACdhB,KAAKiB,eAASb,WAAU,WAC9BT,GAAW,OAqBT,kBACA,wBAAQmB,QA7BM,WAClBnB,GAAW,GACXF,EAAQ,IA2BJ,2BC7DRyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9569b9c2.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { timer, interval } from 'rxjs';\nimport { first, startWith, scan, share } from 'rxjs/operators';\nimport './App.css';\n\nconst App = () => {\n  const [time, setTime] = useState(0);\n  const [isGoing, setIsGoing] = useState(false);\n  let timer$ = interval(1000);\n  useEffect(() => {\n    let start;\n\n    start = timer$\n      .pipe(\n        startWith(time),\n        scan(time => time + 1),\n        share(),\n      )\n      .subscribe(i => {\n        if (isGoing) {\n          setTime(i);\n        }\n      });\n\n    return () => start.unsubscribe();\n  }, [isGoing, time, timer$]);\n\n  const handleClick = button => {\n    const start = isGoing;\n    if (button === 'Start') {\n      setIsGoing(!start);\n    } else if (button === 'Stop') {\n      setTime(0);\n      setIsGoing(!start);\n    }\n  };\n  const handleReset = () => {\n    setIsGoing(true);\n    setTime(0);\n  };\n  const handleWait = () => {\n    const dbClick = timer(300);\n    dbClick.pipe(first()).subscribe(() => {\n      setIsGoing(false);\n    });\n  };\n\nconst toHHMMSS = time => {\n  return new Date(time * 1000).toISOString().substr(11, 8);\n}\n\n  return (\n    <div className=\"App\">\n      <div className=\"displayWrapper\">\n       {toHHMMSS(time)}\n      </div>\n      <div className=\"btnWrapper\">\n        <button\n          onClick={\n            isGoing ? () => handleClick('Stop') : () => handleClick('Start')\n          }\n        >\n          {isGoing ? 'Stop' : 'Start'}\n        </button>\n        <button onDoubleClick={handleWait}>Wait</button>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}